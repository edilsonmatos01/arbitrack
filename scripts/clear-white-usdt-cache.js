const fetch = require('node-fetch');

async function clearWhiteUSDTCache() {
  console.log('üßπ LIMPANDO CACHE ESPEC√çFICO - WHITE_USDT');
  console.log('==========================================\n');
  
  const baseUrl = 'http://localhost:3000';
  const symbol = 'WHITE_USDT';
  
  try {
    console.log(`üìä Limpando cache para: ${symbol}`);
    
    // Teste 1: Limpar cache for√ßando refresh
    console.log('\nüì° Testando com refresh for√ßado...');
    const refreshResponse = await fetch(`${baseUrl}/api/spread-history/24h/${encodeURIComponent(symbol)}?refresh=true&nocache=true`);
    const refreshData = await refreshResponse.json();
    
    console.log(`üìä Status: ${refreshResponse.status}`);
    console.log(`üìà Quantidade de dados: ${Array.isArray(refreshData) ? refreshData.length : 'N/A'}`);
    
    if (Array.isArray(refreshData) && refreshData.length > 0) {
      console.log(`üïê Primeiro registro: ${refreshData[0].timestamp}`);
      console.log(`üïê √öltimo registro: ${refreshData[refreshData.length - 1].timestamp}`);
      
      // Verificar se agora est√° atualizado
      const lastTimestamp = refreshData[refreshData.length - 1].timestamp;
      const [date, time] = lastTimestamp.split(' - ');
      const [hour, minute] = time.split(':').map(Number);
      
      const now = new Date();
      const currentHour = now.getHours();
      const hourDiff = Math.abs(currentHour - hour);
      
      console.log(`‚è∞ Diferen√ßa de horas ap√≥s limpeza: ${hourDiff}h`);
      
      if (hourDiff <= 1) {
        console.log(`‚úÖ CACHE LIMPO COM SUCESSO! Agora est√° atualizado.`);
      } else {
        console.log(`‚ö†Ô∏è  Cache limpo mas ainda h√° diferen√ßa de ${hourDiff}h`);
      }
    }
    
    // Teste 2: Verificar dados brutos novamente
    console.log('\nüì° Verificando dados brutos ap√≥s limpeza...');
    const rawResponse = await fetch(`${baseUrl}/api/spread-history?symbol=${encodeURIComponent(symbol)}&nocache=true`);
    const rawData = await rawResponse.json();
    
    if (Array.isArray(rawData) && rawData.length > 0) {
      console.log(`üìä Dados brutos: ${rawData.length} registros`);
      console.log(`üïê √öltimo registro bruto: ${rawData[rawData.length - 1].timestamp}`);
    }
    
    // Teste 3: Comparar novamente com BRISE_USDT
    console.log('\nüì° Comparando novamente com BRISE_USDT...');
    const briseResponse = await fetch(`${baseUrl}/api/spread-history/24h/BRISE_USDT?nocache=true`);
    const briseData = await briseResponse.json();
    
    if (Array.isArray(refreshData) && refreshData.length > 0 && Array.isArray(briseData) && briseData.length > 0) {
      const whiteLast = refreshData[refreshData.length - 1].timestamp;
      const briseLast = briseData[briseData.length - 1].timestamp;
      
      console.log(`üìä Compara√ß√£o ap√≥s limpeza:`);
      console.log(`  WHITE_USDT: ${whiteLast}`);
      console.log(`  BRISE_USDT: ${briseLast}`);
      
      const whiteHour = parseInt(whiteLast.split(' - ')[1].split(':')[0]);
      const briseHour = parseInt(briseLast.split(' - ')[1].split(':')[0]);
      
      const hourDiff = Math.abs(whiteHour - briseHour);
      console.log(`‚è∞ Diferen√ßa entre WHITE e BRISE: ${hourDiff}h`);
      
      if (hourDiff <= 1) {
        console.log(`‚úÖ PROBLEMA RESOLVIDO! Timezones agora est√£o consistentes.`);
      } else {
        console.log(`üö® PROBLEMA PERSISTE: Diferen√ßa de ${hourDiff}h entre WHITE e BRISE`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a limpeza:', error.message);
  }
}

clearWhiteUSDTCache(); 