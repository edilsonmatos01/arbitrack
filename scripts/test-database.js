const { PrismaClient } = require('@prisma/client');

async function testDatabase() {
  console.log('üóÑÔ∏è Testando conex√£o com o banco de dados...');
  
  let prisma;
  try {
    prisma = new PrismaClient();
    console.log('‚úÖ Prisma Client criado com sucesso');
    
    // Testar conex√£o
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com banco estabelecida');
    
    // Verificar se a tabela OperationHistory existe
    console.log('üîç Verificando tabela OperationHistory...');
    
    // Contar total de opera√ß√µes
    const totalCount = await prisma.operationHistory.count();
    console.log('üìä Total de opera√ß√µes no banco:', totalCount);
    
    if (totalCount > 0) {
      // Buscar todas as opera√ß√µes
      const allOperations = await prisma.operationHistory.findMany({
        orderBy: { finalizedAt: 'desc' },
        take: 10
      });
      
      console.log('üìã √öltimas 10 opera√ß√µes:');
      allOperations.forEach((op, index) => {
        console.log(`${index + 1}. ID: ${op.id}`);
        console.log(`   S√≠mbolo: ${op.symbol}`);
        console.log(`   Lucro USD: ${op.profitLossUsd}`);
        console.log(`   Lucro %: ${op.profitLossPercent}`);
        console.log(`   Data: ${op.finalizedAt}`);
        console.log(`   Exchanges: ${op.spotExchange} / ${op.futuresExchange}`);
        console.log('');
      });
      
      // Testar filtro de 24h
      const now = new Date();
      const twentyFourHoursAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
      
      console.log('‚è∞ Testando filtro de 24h...');
      console.log('Desde:', twentyFourHoursAgo.toISOString());
      console.log('At√©:', now.toISOString());
      
      const recentOperations = await prisma.operationHistory.findMany({
        where: {
          finalizedAt: {
            gte: twentyFourHoursAgo
          }
        },
        orderBy: { finalizedAt: 'desc' }
      });
      
      console.log('üìä Opera√ß√µes nas √∫ltimas 24h:', recentOperations.length);
      
      if (recentOperations.length > 0) {
        console.log('üìã Opera√ß√µes recentes:');
        recentOperations.forEach((op, index) => {
          console.log(`${index + 1}. ${op.symbol} - $${op.profitLossUsd} (${op.finalizedAt})`);
        });
      }
      
    } else {
      console.log('‚ö†Ô∏è Nenhuma opera√ß√£o encontrada no banco');
      
      // Verificar estrutura da tabela
      console.log('üîç Verificando estrutura da tabela...');
      try {
        const sampleQuery = await prisma.$queryRaw`SELECT * FROM "OperationHistory" LIMIT 1`;
        console.log('‚úÖ Tabela existe e √© acess√≠vel');
      } catch (error) {
        console.error('‚ùå Erro ao acessar tabela:', error.message);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao conectar com banco:', error.message);
    console.error('‚ùå Stack trace:', error.stack);
  } finally {
    if (prisma) {
      await prisma.$disconnect();
      console.log('üîå Conex√£o com banco fechada');
    }
  }
}

testDatabase().catch(console.error); 