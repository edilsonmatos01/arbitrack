const fetch = require('node-fetch');

async function testCharts() {
  console.log('üìä Testando gr√°ficos de an√°lise...\n');
  
  const baseUrl = 'http://localhost:3000';
  const symbol = 'WHITE_USDT';
  
  try {
    console.log(`üìä Testando s√≠mbolo: ${symbol}`);
    console.log(`üåç Hor√°rio atual (Brasil): ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`);
    
    // Teste 1: API de Spread History 24h
    console.log('\nüì° Testando API Spread History 24h...');
    const spreadResponse = await fetch(`${baseUrl}/api/spread-history/24h/${encodeURIComponent(symbol)}`);
    const spreadData = await spreadResponse.json();
    
    console.log(`üìä Status: ${spreadResponse.status}`);
    console.log(`üìà Quantidade de dados: ${Array.isArray(spreadData) ? spreadData.length : 'N/A'}`);
    
    if (Array.isArray(spreadData) && spreadData.length > 0) {
      console.log(`üïê Primeiro registro: ${spreadData[0].timestamp}`);
      console.log(`üïê √öltimo registro: ${spreadData[spreadData.length - 1].timestamp}`);
      console.log(`üìä Spread m√°ximo: ${Math.max(...spreadData.map(d => d.spread_percentage)).toFixed(2)}%`);
    }
    
    // Teste 2: API de Price Comparison
    console.log('\nüì° Testando API Price Comparison...');
    const priceResponse = await fetch(`${baseUrl}/api/price-comparison/${encodeURIComponent(symbol)}`);
    const priceData = await priceResponse.json();
    
    console.log(`üìä Status: ${priceResponse.status}`);
    console.log(`üìà Quantidade de dados: ${Array.isArray(priceData) ? priceData.length : 'N/A'}`);
    
    if (Array.isArray(priceData) && priceData.length > 0) {
      console.log(`üïê Primeiro registro: ${priceData[0].timestamp}`);
      console.log(`üïê √öltimo registro: ${priceData[priceData.length - 1].timestamp}`);
      
      // Verificar se h√° dados de pre√ßos v√°lidos
      const validPrices = priceData.filter(d => d.gateio_price && d.mexc_price);
      console.log(`üí∞ Registros com pre√ßos v√°lidos: ${validPrices.length}/${priceData.length}`);
      
      if (validPrices.length > 0) {
        const lastPrice = validPrices[validPrices.length - 1];
        console.log(`üí± √öltimo pre√ßo Gate.io: $${lastPrice.gateio_price.toFixed(8)}`);
        console.log(`üí± √öltimo pre√ßo MEXC: $${lastPrice.mexc_price.toFixed(8)}`);
        
        const spread = ((lastPrice.mexc_price - lastPrice.gateio_price) / lastPrice.gateio_price) * 100;
        console.log(`üìä Spread atual: ${spread.toFixed(2)}%`);
      }
    }
    
    // Resumo
    console.log('\n‚úÖ RESUMO DOS TESTES:');
    console.log(`   üìà Spread 24h: ${Array.isArray(spreadData) && spreadData.length > 0 ? '‚úÖ Funcionando' : '‚ùå Sem dados'}`);
    console.log(`   üí∞ Spot vs Futures: ${Array.isArray(priceData) && priceData.length > 0 ? '‚úÖ Funcionando' : '‚ùå Sem dados'}`);
    
    if (Array.isArray(spreadData) && spreadData.length > 0 && Array.isArray(priceData) && priceData.length > 0) {
      console.log(`\nüéâ AMBOS OS GR√ÅFICOS EST√ÉO FUNCIONANDO!`);
      console.log(`   ‚Ä¢ Gr√°fico "Spread 24h" pronto para uso`);
      console.log(`   ‚Ä¢ Gr√°fico "Spot vs Futures" pronto para uso`);
      console.log(`   ‚Ä¢ Altern√¢ncia entre gr√°ficos implementada`);
    } else {
      console.log(`\n‚ö†Ô∏è  ALGUNS GR√ÅFICOS PODEM N√ÉO TER DADOS SUFICIENTES`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  }
}

testCharts(); 