import { PrismaClient } from '@prisma/client';
import cron from 'node-cron';

const prisma = new PrismaClient();

async function vacuumDatabase() {
  try {
    console.log('üßπ Iniciando VACUUM do banco de dados...');
    const startTime = Date.now();

    // Executar VACUUM em todas as tabelas principais
    await prisma.$executeRaw`VACUUM "SpreadHistory"`;
    console.log('‚úÖ VACUUM SpreadHistory conclu√≠do');

    await prisma.$executeRaw`VACUUM "PriceHistory"`;
    console.log('‚úÖ VACUUM PriceHistory conclu√≠do');

    // OperationHistory n√£o √© limpa para manter o hist√≥rico de opera√ß√µes
    // await prisma.$executeRaw`VACUUM "OperationHistory"`;
    console.log('‚ÑπÔ∏è OperationHistory preservada (hist√≥rico de opera√ß√µes)');

    await prisma.$executeRaw`VACUUM "Position"`;
    console.log('‚úÖ VACUUM Position conclu√≠do');

    const duration = Date.now() - startTime;
    console.log(`üéâ VACUUM conclu√≠do em ${duration}ms`);

    // Verificar espa√ßo liberado
    const tableSizes = await prisma.$queryRaw`
      SELECT 
        schemaname,
        tablename,
        pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
      FROM pg_tables 
      WHERE schemaname = 'public'
      ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;
    `;

    console.log('üìä Tamanho das tabelas ap√≥s VACUUM:', tableSizes);

  } catch (error) {
    console.error('‚ùå Erro ao executar VACUUM:', error);
  }
}

async function cleanupOldData() {
  try {
    console.log('üóëÔ∏è Iniciando limpeza de dados antigos (mantendo apenas √∫ltimas 24h)...');
    
    // Remover dados com mais de 24 horas
    const deletedSpreads = await prisma.spreadHistory.deleteMany({
      where: {
        timestamp: {
          lt: new Date(Date.now() - 24 * 60 * 60 * 1000)
        }
      }
    });

    const deletedPrices = await prisma.priceHistory.deleteMany({
      where: {
        timestamp: {
          lt: new Date(Date.now() - 24 * 60 * 60 * 1000)
        }
      }
    });

    // OperationHistory n√£o √© limpa para preservar hist√≥rico de opera√ß√µes
    console.log(`üóëÔ∏è Removidos ${deletedSpreads.count} spreads com mais de 24h`);
    console.log(`üóëÔ∏è Removidos ${deletedPrices.count} pre√ßos com mais de 24h`);
    console.log('‚ÑπÔ∏è OperationHistory preservada (hist√≥rico de opera√ß√µes mantido)');

    // Executar VACUUM ap√≥s limpeza
    await vacuumDatabase();

  } catch (error) {
    console.error('‚ùå Erro ao limpar dados antigos:', error);
  }
}

// Configurar cron jobs
function setupCronJobs() {
  console.log('‚è∞ Configurando jobs de limpeza...');

  // VACUUM di√°rio √†s 3h da manh√£
  cron.schedule('0 3 * * *', async () => {
    console.log('üåÖ Executando VACUUM di√°rio...');
    await vacuumDatabase();
  });

  // Limpeza di√°ria √†s 2h da manh√£ (mant√©m apenas √∫ltimas 24h)
  cron.schedule('0 2 * * *', async () => {
    console.log('üßπ Executando limpeza di√°ria (mantendo apenas √∫ltimas 24h)...');
    await cleanupOldData();
  });

  // VACUUM a cada 6 horas
  cron.schedule('0 */6 * * *', async () => {
    console.log('üïê Executando VACUUM a cada 6 horas...');
    await vacuumDatabase();
  });

  console.log('‚úÖ Jobs de limpeza configurados');
}

// Executar imediatamente se chamado diretamente
if (require.main === module) {
  console.log('üöÄ Iniciando script de VACUUM...');
  vacuumDatabase()
    .then(() => {
      console.log('‚úÖ Script conclu√≠do');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro:', error);
      process.exit(1);
    });
} else {
  // Exportar para uso em outros m√≥dulos
  setupCronJobs();
}

export { vacuumDatabase, cleanupOldData, setupCronJobs }; 