const WebSocket = require('ws');

// Configura√ß√µes
const WS_URL = 'ws://localhost:10000';
const TEST_DURATION = 10000; // 10 segundos

console.log('üß™ Teste de Exibi√ß√£o de Oportunidades');
console.log('');

// Estat√≠sticas
const stats = {
  opportunities: 0,
  priceUpdates: 0,
  heartbeats: 0,
  errors: 0,
  startTime: Date.now()
};

// Conectar ao WebSocket
const ws = new WebSocket(WS_URL);

ws.on('open', () => {
  console.log('‚úÖ Conectado ao servidor WebSocket');
  console.log('‚è±Ô∏è  Aguardando oportunidades...');
  console.log('');
});

ws.on('message', (data) => {
  try {
    const message = JSON.parse(data.toString());
    
    switch (message.type) {
      case 'opportunity':
        stats.opportunities++;
        console.log(`üéØ OPORTUNIDADE #${stats.opportunities}:`);
        console.log(`   S√≠mbolo: ${message.symbol}`);
        console.log(`   Spread: ${message.spread.toFixed(3)}%`);
        console.log(`   Compra: ${message.exchangeBuy} @ ${message.spotPrice}`);
        console.log(`   Venda: ${message.exchangeSell} @ ${message.futuresPrice}`);
        console.log(`   Dire√ß√£o: ${message.direction}`);
        console.log('');
        break;
        
      case 'price-update':
        stats.priceUpdates++;
        if (stats.priceUpdates % 50 === 0) { // Log a cada 50 atualiza√ß√µes
          console.log(`üìä ${stats.priceUpdates} atualiza√ß√µes de pre√ßo recebidas`);
        }
        break;
        
      case 'heartbeat':
        stats.heartbeats++;
        console.log(`üíì Heartbeat #${stats.heartbeats}: ${message.message}`);
        break;
        
      case 'connection':
        console.log(`üîó ${message.message}`);
        console.log(`üìä Pares monitorados: ${message.monitoredPairs}`);
        console.log('');
        break;
        
      default:
        console.log(`üì® Mensagem desconhecida: ${message.type}`);
    }
  } catch (error) {
    console.error('‚ùå Erro ao processar mensagem:', error);
    stats.errors++;
  }
});

ws.on('error', (error) => {
  console.error('‚ùå Erro de WebSocket:', error);
  stats.errors++;
});

ws.on('close', () => {
  console.log('üîå Conex√£o fechada');
});

// Timer para encerrar o teste
setTimeout(() => {
  console.log('');
  console.log('üìä RESULTADOS DO TESTE:');
  console.log(`‚è±Ô∏è  Dura√ß√£o: ${(Date.now() - stats.startTime) / 1000}s`);
  console.log(`üéØ Oportunidades encontradas: ${stats.opportunities}`);
  console.log(`üìä Atualiza√ß√µes de pre√ßo: ${stats.priceUpdates}`);
  console.log(`üíì Heartbeats: ${stats.heartbeats}`);
  console.log(`‚ùå Erros: ${stats.errors}`);
  
  if (stats.opportunities > 0) {
    console.log('');
    console.log('‚úÖ SUCESSO: Oportunidades est√£o sendo geradas!');
    console.log('üí° Verifique se elas aparecem na tabela da interface.');
  } else {
    console.log('');
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Nenhuma oportunidade foi encontrada.');
    console.log('üí° Verifique:');
    console.log('   1. Se o worker est√° rodando');
    console.log('   2. Se os conectores est√£o funcionando');
    console.log('   3. Se h√° spreads significativos nos pares monitorados');
  }
  
  ws.close();
  process.exit(0);
}, TEST_DURATION); 