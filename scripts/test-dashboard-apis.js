// Script para testar APIs do dashboard
const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';

async function testAPI(endpoint, name) {
  try {
    console.log(`\nüîç Testando ${name}...`);
    console.log(`üì° URL: ${BASE_URL}${endpoint}`);
    
    const response = await fetch(`${BASE_URL}${endpoint}`);
    console.log(`üìä Status: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ Dados recebidos:`, data);
      
      if (Array.isArray(data)) {
        console.log(`üìä Total de registros: ${data.length}`);
        if (data.length > 0) {
          console.log(`üìù Primeiro registro:`, data[0]);
        }
      }
    } else {
      const errorText = await response.text();
      console.log(`‚ùå Erro: ${errorText}`);
    }
  } catch (error) {
    console.error(`‚ùå Erro na API ${name}:`, error.message);
  }
}

async function testAllAPIs() {
  console.log('üöÄ Iniciando testes das APIs do dashboard...');
  console.log('üåê Base URL:', BASE_URL);
  
  // APIs que o dashboard usa
  const apis = [
    { endpoint: '/api/operation-history?filter=all', name: 'Hist√≥rico de Opera√ß√µes' },
    { endpoint: '/api/config/api-keys', name: 'Configura√ß√µes de API' },
    { endpoint: '/api/config/manual-balances', name: 'Saldos Manuais' },
    { endpoint: '/api/positions', name: 'Posi√ß√µes' },
    { endpoint: '/api/spread-history', name: 'Hist√≥rico de Spreads' }
  ];
  
  for (const api of apis) {
    await testAPI(api.endpoint, api.name);
  }
  
  console.log('\n‚úÖ Testes conclu√≠dos!');
}

// Executar testes
testAllAPIs().catch(console.error); 