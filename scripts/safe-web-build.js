const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);

async function safeWebBuild() {
    try {
        console.log('üîß Iniciando build seguro para aplica√ß√£o web...');
        console.log('üìã Node version:', process.version);
        console.log('üìã NPM version:', await getNpmVersion());
        
        // 1. Limpar cache do npm se necess√°rio
        console.log('üßπ Limpando cache do npm...');
        try {
            await execAsync('npm cache clean --force');
            console.log('‚úÖ Cache limpo');
        } catch (cacheError) {
            console.log('‚ö†Ô∏è  Erro ao limpar cache (continuando):', cacheError.message);
        }
        
        // 2. Instalar depend√™ncias
        console.log('üì¶ Instalando depend√™ncias...');
        await execAsync('npm install --production=false');
        console.log('‚úÖ Depend√™ncias instaladas');
        
        // 3. Gerar Prisma Client
        console.log('üì¶ Gerando Prisma Client...');
        await execAsync('npx prisma generate');
        console.log('‚úÖ Prisma Client gerado com sucesso');
        
        // 4. Build do Next.js
        console.log('üèóÔ∏è  Fazendo build do Next.js...');
        await execAsync('npx next build');
        console.log('‚úÖ Build do Next.js conclu√≠do com sucesso');
        
        console.log('üéâ Build seguro da web conclu√≠do com sucesso!');
        
    } catch (error) {
        console.error('‚ùå Erro durante o build:', error.message);
        console.error('‚ùå Stack trace:', error.stack);
        
        // Se falhar, tenta uma abordagem mais b√°sica
        console.log('üîÑ Tentando abordagem alternativa...');
        try {
            console.log('üì¶ Tentando build b√°sico do Next.js...');
            await execAsync('npx next build --debug');
            console.log('‚úÖ Build alternativo bem-sucedido');
        } catch (fallbackError) {
            console.error('‚ùå Falha no build alternativo:', fallbackError.message);
            console.error('‚ùå Stack trace alternativo:', fallbackError.stack);
            process.exit(1);
        }
    }
}

async function getNpmVersion() {
    try {
        const { stdout } = await execAsync('npm --version');
        return stdout.trim();
    } catch (error) {
        return 'unknown';
    }
}

if (require.main === module) {
    safeWebBuild()
        .then(() => {
            console.log('üéâ Build conclu√≠do com sucesso!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Build falhou:', error);
            process.exit(1);
        });
}

module.exports = { safeWebBuild }; 