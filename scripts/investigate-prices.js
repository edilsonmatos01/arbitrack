const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  log: ['error', 'warn'],
});

async function investigatePrices() {
  try {
    console.log('üîç Investigando pre√ßos nos registros...');
    
    await prisma.$connect();
    console.log('‚úÖ Conex√£o estabelecida');
    
    // Contar total de registros
    const total = await prisma.spreadHistory.count();
    console.log(`üìä Total de registros: ${total}`);
    
    // Contar registros com pre√ßos preenchidos
    const withPrices = await prisma.spreadHistory.count({
      where: {
        spotPrice: { not: 0 },
        futuresPrice: { not: 0 }
      }
    });
    console.log(`üí∞ Registros com pre√ßos preenchidos: ${withPrices}`);
    
    // Contar registros com pre√ßos zerados
    const withZeroPrices = await prisma.spreadHistory.count({
      where: {
        OR: [
          { spotPrice: 0 },
          { futuresPrice: 0 }
        ]
      }
    });
    console.log(`‚ùå Registros com pre√ßos zerados: ${withZeroPrices}`);
    
    // Verificar registros por per√≠odo (√∫ltimas 24 horas)
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const recentTotal = await prisma.spreadHistory.count({
      where: {
        timestamp: { gte: oneDayAgo }
      }
    });
    
    const recentWithPrices = await prisma.spreadHistory.count({
      where: {
        timestamp: { gte: oneDayAgo },
        spotPrice: { not: 0 },
        futuresPrice: { not: 0 }
      }
    });
    
    console.log(`\nüìÖ √öltimas 24 horas:`);
    console.log(`   Total: ${recentTotal}`);
    console.log(`   Com pre√ßos: ${recentWithPrices}`);
    console.log(`   Percentual: ${((recentWithPrices / recentTotal) *100).toFixed(2)}%`);
    
    // Verificar alguns registros antigos sem pre√ßos
    const oldWithoutPrices = await prisma.spreadHistory.findMany({
      where: {
        timestamp: { lt: oneDayAgo },
        OR: [
          { spotPrice: 0 },
          { futuresPrice: 0 }
        ]
      },
      take: 5,
      orderBy: { timestamp: 'desc' }
    });
    
    console.log(`\nüìã Exemplos de registros antigos sem pre√ßos:`);
    oldWithoutPrices.forEach((record, index) => {
      console.log(`   ${index + 1}. ${record.symbol} - Spread: ${record.spread}% - Spot: ${record.spotPrice} - Futures: ${record.futuresPrice} - ${record.timestamp}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro na investiga√ß√£o:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

investigatePrices(); 