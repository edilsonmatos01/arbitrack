const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);

async function safeProductionBuild() {
    try {
        console.log('üîß Iniciando build seguro para produ√ß√£o...');
        
        // 1. Gerar apenas o Prisma Client
        console.log('üì¶ Gerando Prisma Client...');
        await execAsync('npx prisma generate');
        console.log('‚úÖ Prisma Client gerado com sucesso');
        
        // 2. Compilar TypeScript
        console.log('üî® Compilando TypeScript...');
        await execAsync('npx tsc -p tsconfig.server.json');
        console.log('‚úÖ TypeScript compilado com sucesso');
        
        console.log('üéâ Build seguro conclu√≠do com sucesso!');
        
    } catch (error) {
        console.error('‚ùå Erro durante o build:', error.message);
        
        // Se falhar, tenta uma abordagem mais b√°sica
        console.log('üîÑ Tentando abordagem alternativa...');
        try {
            await execAsync('npx tsc -p tsconfig.server.json');
            console.log('‚úÖ Compila√ß√£o alternativa bem-sucedida');
        } catch (fallbackError) {
            console.error('‚ùå Falha na compila√ß√£o alternativa:', fallbackError.message);
            process.exit(1);
        }
    }
}

if (require.main === module) {
    safeProductionBuild()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error('‚ùå Build falhou:', error);
            process.exit(1);
        });
}

module.exports = { safeProductionBuild }; 