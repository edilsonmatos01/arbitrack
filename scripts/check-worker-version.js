const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  log: ['error', 'warn'],
});

async function checkWorkerVersion() {
  try {
    console.log('üîç Verificando vers√£o do worker na Render...');
    
    await prisma.$connect();
    console.log('‚úÖ Conex√£o estabelecida');
    
    // Verificar registros das √∫ltimas2oras
    const twoHoursAgo = new Date(Date.now() - 260 * 60 * 1000);
    const recentRecords = await prisma.spreadHistory.findMany({
      where: {
        timestamp: { gte: twoHoursAgo }
      },
      orderBy: [{ timestamp: 'desc' }],
      take: 20,
    });
    
    console.log(`üìä Registros das √∫ltimas2s: ${recentRecords.length}`);
    
    if (recentRecords.length === 0) {
      console.log('‚ö†Ô∏è Nenhum registro recente encontrado - worker pode estar parado');
      return;
    }
    
    // Analisar se os pre√ßos est√£o sendo salvos
    let withPrices = 0;
    let withoutPrices = 0;
    
    console.log('\nüìã An√°lise dos registros mais recentes:');
    recentRecords.forEach((record, index) => {
      const hasPrices = record.spotPrice > 0 && record.futuresPrice > 0;
      if (hasPrices) withPrices++;
      else withoutPrices++;
      
      console.log(`  ${index + 1}. ${record.symbol} - Spread: ${record.spread}% - Spot: ${record.spotPrice} - Futures: ${record.futuresPrice} - ${record.timestamp}`);
    });
    
    console.log(`\nüìà Resultado:`);
    console.log(`   Com pre√ßos: ${withPrices}`);
    console.log(`   Sem pre√ßos: ${withoutPrices}`);
    console.log(`   Percentual com pre√ßos: ${((withPrices / recentRecords.length) *100).toFixed(2)}%`);
    
    // Verificar se o worker est√° ativo (registros a cada poucos minutos)
    const lastRecord = recentRecords[0];
    const timeDiff = Date.now() - lastRecord.timestamp.getTime();
    const minutesDiff = Math.floor(timeDiff / (1000 * 60));
    
    console.log(`\n‚è∞ √öltimo registro: ${minutesDiff} minutos atr√°s`);
    
    if (minutesDiff < 10) {
      console.log('‚úÖ Worker est√° ativo e gravando dados recentemente');
    } else if (minutesDiff < 30) {
      console.log('‚ö†Ô∏è Worker pode estar com problemas - dados n√£o muito recentes');
    } else {
      console.log('‚ùå Worker pode estar parado - dados muito antigos');
    }
    
    // Verificar se a corre√ß√£o est√° funcionando
    if (withPrices > 0) {
      console.log('‚úÖ Corre√ß√£o dos pre√ßos est√° funcionando!');
    } else {
      console.log('‚ùå Corre√ß√£o dos pre√ßos N√ÉO est√° funcionando');
    }
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkWorkerVersion(); 