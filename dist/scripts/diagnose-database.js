"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient({
    datasources: {
        db: {
            url: process.env.DATABASE_URL,
        },
    },
    log: ['error', 'warn'],
});
async function diagnoseDatabase() {
    var _a, _b;
    try {
        console.log('üîç Diagnosticando banco de dados...\n');
        console.log('üì° Teste de conectividade...');
        const startTime = Date.now();
        try {
            await prisma.$queryRaw `SELECT 1 as test`;
            const responseTime = Date.now() - startTime;
            console.log(`   ‚úÖ Conectividade OK (${responseTime}ms)`);
        }
        catch (error) {
            console.log(`   ‚ùå Erro de conectividade:`, error);
            return;
        }
        try {
            const version = await prisma.$queryRaw `SELECT version()`;
            const versionResult = version;
            console.log(`   üìä Vers√£o: ${((_a = versionResult[0]) === null || _a === void 0 ? void 0 : _a.version) || 'N/A'}`);
        }
        catch (error) {
            console.log(`   ‚ö†Ô∏è  N√£o foi poss√≠vel obter vers√£o:`, error);
        }
        console.log('\nüìä Estat√≠sticas da tabela SpreadHistory...');
        const totalRecords = await prisma.spreadHistory.count();
        console.log(`   Total de registros: ${totalRecords.toLocaleString()}`);
        const recentRecords = await prisma.spreadHistory.count({
            where: {
                timestamp: {
                    gte: new Date(Date.now() - 24 * 60 * 60 * 1000)
                }
            }
        });
        console.log(`   Registros nas √∫ltimas 24h: ${recentRecords.toLocaleString()}`);
        const topSymbols = await prisma.spreadHistory.groupBy({
            by: ['symbol'],
            _count: {
                symbol: true
            },
            orderBy: {
                _count: {
                    symbol: 'desc'
                }
            },
            take: 5
        });
        console.log('\nüèÜ Top 5 s√≠mbolos mais ativos:');
        topSymbols.forEach((symbol, index) => {
            console.log(`   ${index + 1}. ${symbol.symbol}: ${symbol._count.symbol.toLocaleString()} registros`);
        });
        console.log('\n‚ö° Teste de performance...');
        const perfStart = Date.now();
        await prisma.spreadHistory.findMany({
            where: {
                timestamp: {
                    gte: new Date(Date.now() - 60 * 60 * 1000)
                }
            },
            take: 1000
        });
        const perfTime = Date.now() - perfStart;
        console.log(`   Query simples: ${perfTime}ms`);
        const aggStart = Date.now();
        await prisma.spreadHistory.groupBy({
            by: ['symbol'],
            where: {
                timestamp: {
                    gte: new Date(Date.now() - 24 * 60 * 60 * 1000)
                }
            },
            _count: {
                symbol: true
            }
        });
        const aggTime = Date.now() - aggStart;
        console.log(`   Query de agrega√ß√£o: ${aggTime}ms`);
        console.log('\nüîç Verificando registros problem√°ticos...');
        const zeroPriceCount = await prisma.spreadHistory.count({
            where: {
                OR: [
                    { spotPrice: 0 },
                    { futuresPrice: 0 }
                ]
            }
        });
        console.log(`   Registros com pre√ßos zerados: ${zeroPriceCount.toLocaleString()}`);
        console.log(`   Registros com pre√ßos nulos: N/A (verifica√ß√£o n√£o dispon√≠vel)`);
        const duplicates = await prisma.$queryRaw `
      SELECT COUNT(*) as duplicate_count
      FROM (
        SELECT symbol, timestamp, COUNT(*)
        FROM "SpreadHistory"
        GROUP BY symbol, timestamp
        HAVING COUNT(*) > 1
      ) as dupes
    `;
        const duplicatesResult = duplicates;
        const duplicateCount = ((_b = duplicatesResult[0]) === null || _b === void 0 ? void 0 : _b.duplicate_count) || 0;
        console.log(`   Registros duplicados: ${duplicateCount.toLocaleString()}`);
        console.log('\nüí° Recomenda√ß√µes:');
        if (totalRecords > 1000000) {
            console.log('   ‚ö†Ô∏è  Muitos registros - considere limpeza de dados antigos');
        }
        if (zeroPriceCount > 0) {
            console.log('   ‚ö†Ô∏è  Registros com pre√ßos zerados - limpeza recomendada');
        }
        if (duplicateCount > 0) {
            console.log('   ‚ö†Ô∏è  Registros duplicados - limpeza recomendada');
        }
        if (perfTime > 1000) {
            console.log('   ‚ö†Ô∏è  Performance lenta - considere otimizar queries');
        }
        if (aggTime > 2000) {
            console.log('   ‚ö†Ô∏è  Agrega√ß√µes lentas - considere √≠ndices');
        }
        console.log('\n‚úÖ Diagn√≥stico conclu√≠do!');
    }
    catch (error) {
        console.error('‚ùå Erro durante diagn√≥stico:', error);
    }
    finally {
        await prisma.$disconnect();
    }
}
diagnoseDatabase();
//# sourceMappingURL=diagnose-database.js.map